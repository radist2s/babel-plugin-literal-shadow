// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel should be compatible with \`reshadow\` plugin 1`] = `
"import myReshadowStyled, { css, __css__, set, create } from \\"@reshadow/core\\";
const Button = 'button';
const buttonStyles = (
/*__reshadow_css_start__*/
__css__(
/*__inner_css_start__*/
\`.___Button_14i87_1 {font: arial}\`
/*__inner_css_end__*/
, \\"14i87f\\")
/*__reshadow_css_end__*/
, {
  \\"__Button\\": \`___Button_14i87_1\`
});
const myReshadowStyled_c8 = create([buttonStyles, (
/*__reshadow_css_start__*/
__css__(
/*__inner_css_start__*/
\`.___Button_117nv_1 {
    color: purple;
}\`
/*__inner_css_end__*/
, \\"117nvk7\\")
/*__reshadow_css_end__*/
, {
  \\"__Button\\": \`___Button_117nv_1\`
})]);

const StyledButton = () => myReshadowStyled((set([myReshadowStyled_c8]), /*#__PURE__*/React.createElement(Button, {
  className: myReshadowStyled.styles[\\"__Button\\"]
})));"
`;

exports[`babel should transform the code from start and at the end 1`] = `
"import { css as cssTemplate } from 'reshadow';
const Foo = 'div';
const styles1 = cssTemplate\`Foo { background: blue; }\`;
const styles2 = cssTemplate\`Foo { background: blue; }
\`;
const styles3 = cssTemplate\`
Foo { background: blue; }\`;
export default {
  styles1,
  styles2,
  styles3
};"
`;

exports[`babel should transform the code in CSS 1`] = `
"import { css as cssTemplate } from 'reshadow';
const Foo = 'div';
const styles = cssTemplate\`
Foo { background: blue; }

Foo { fill: red; }
\`;
export default styles;"
`;

exports[`babel should transform the code with Function/Class identifier 1`] = `
"import styled, { css } from 'reshadow';

const Comp = () => /*#__PURE__*/React.createElement(\\"div\\", null, \\"Component\\");

const Btn = ({
  color
}) => styled\`
  Comp { background: blue; }

  Comp { fill: red; }

  Comp { color: \${color}; }
\`( /*#__PURE__*/React.createElement(Foobar, null));

export default Btn;"
`;

exports[`babel should transform the code with string literal identifier 1`] = `
"import styled, { css } from 'reshadow';
const Foobar = 'div';
const Bar = 'span';

const Btn = ({
  color
}) => styled\`
  Foobar { background: blue; }

  Bar + Bar[disabled] { fill: red; }

  Foobar { color: \${color}; }
\`( /*#__PURE__*/React.createElement(Foobar, null));

export default Btn;"
`;

exports[`babel should use options 1`] = `
"import myStyled from 'my-styled-lib';

const Button = () => /*#__PURE__*/React.createElement(Button, null);

const style1 = myStyled\`
    Button {
        color: red;
    }
\`;
const style2 = myStyled\`
    Button { // also possible to use function as Tag inside preparing template
        color: red;
    }
    // This could be used for semantic purposes instead of function call implementation
\`;"
`;
